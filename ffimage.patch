diff --git a/_posts/2019-12-16-Image-caching-with-FFImageloading.md b/_posts/2019-12-16-Image-caching-with-FFImageloading.md
index 8c81e1d..1dd630a 100644
--- a/_posts/2019-12-16-Image-caching-with-FFImageloading.md
+++ b/_posts/2019-12-16-Image-caching-with-FFImageloading.md
@@ -9,9 +9,9 @@ toc: true
 toc_sticky: true
 ---
 
-인터넷에 있는 이미지를 앱에 표시할때는 때때로 네트워크 문제로 이미지 로딩에 실패하거나 매우 느리게 표시되는 경우가 발생합니다. 이때는 이미지가 표시 되기 전까지 임시 이미지를 표시하고, 로딩에 실패한 경우 다시 로딩을 시도하며, 이미 다운 받은 적이 있는 데이터의 경우 이를 또 사용하여 빠르게 이미지를 화면에 표시하는 방법으로 구현해야 합니다.
+When you want to use the internet image in your application, you would be worrying about the slow image loading or the load failure caused by the network issues. In this scenario, it would be really good idea to show the default temporal image until the actual image is successfully loaded and ready to be displayed. Also reusing the image data which has been downloaded can make displaying image very fast.
 
-FFImageLoading은 이를 모든 기능이 구현된 라이브러리로 이미지를 빠르고 쉽게 로드할 수 있게 도와줍니다.
+`FFImageLoading` is the library including all those cool features and helping you to load images quick and easy.
 
 ## What is FFImageLoading - Fast & Furious Image Loading 
 Library to load images quickly & easily on Xamarin.iOS, Xamarin.Android, Xamarin.Forms, Xamarin.Mac / Xamarin.Tizen and Windows (UWP, WinRT).
@@ -53,7 +53,7 @@ FFImageLoading.Forms.Platform.CachedImageRenderer.Init(app);
 ```
 
 ### Setup options on startup time
- If you want to handling events from CachedImage object on your app code, need to set `ExecuteCallbacksOnUIThread` property to `true`
+ If you want to handle events from CachedImage object on your app code, you need to set `ExecuteCallbacksOnUIThread` property to `true`
 ```cs
 protected override void OnCreate()
 {
@@ -68,7 +68,7 @@ protected override void OnCreate()
 ```
 
 ## CachedImage
- `CachedImage` provide a main functionality of FFImageLoading including cached image loading. a usage is very simmilar with original `Image` class of Xamarin.Forms.
+ `CachedImage` provides a main functionality of FFImageLoading including cached image loading. A usage is very simmilar with the original `Image` class of Xamarin.Forms.
 
 ```xml
 <?xml version="1.0" encoding="utf-8" ?>
@@ -97,13 +97,13 @@ var image = new CachedImage
 | Property | Description |
 |-|-|
 |LoadingPlaceholder|If set, a loading placeholder is shown while loading. It supports UriImageSource, FileImageSource and StreamImageSource.|
- |ErrorPlaceholder|If set, if error occurs while loading image, an error placeholder is shown. It supports UriImageSource, FileImageSource and StreamImageSource.|
+ |ErrorPlaceholder|If set, an error placeholder is shown when error occurs while loading image. It supports UriImageSource, FileImageSource and StreamImageSource.|
  |RetryCount (int, default: 3)|If image download failed, or something wrong happened, it can be automatically retried. Defines retries count.|
  |RetryDelay (int, default: 250)|If image download failed, or something wrong happened, it can be automatically retried. Defines retry delay.|
  |CacheDuration (Timespan, default: `TimeSpan.FromDays(90)`)|Defines how long file cache of downloaded image is valid.|
 
 ## Clear cache on the memory and disk
- If not enough memory on device, need to suppression memory usage in your app, FFImageLoading provide way to clear a cache on the memory
+ If there is not enough memory on a device, you need to suppress memory usage in your app, FFImageLoading provides a way to clear cache on the memory.
 
 ``` c#
 // Provided in `CoreApplication`, it is the best place to clear memory cache
@@ -113,18 +113,18 @@ protected override void OnLowMemory(LowMemoryEventArgs e)
 }
 ```
 
- You can also clear a cache on the disk
+ You can also clear cache on the disk.
 ``` c#
 FFImageLoading.ImageService.Instance.InvalidateDiskCacheAsync();
 ```
 
 ## The Best usage of CachedImage
- `CachedImage` work best when used in `CollectionView`, because `CollectionView` is unload a view that out of sight and reload when come back to the sight. Once loaded image source is really quickly shown
+ `CachedImage` works best when it is used in `CollectionView`, because `CollectionView` unloads a view that is out of sight and reloads when it comes back to the sight. Once image source is loaded, it shows really quick.
 ![][img1]
 
 
 ## Privileges 
- If image from internet does not shown, check your app's privilege, it need internet privilege.
+ If image from internet is not shown, check your app's privilege, it needs internet privilege.
 
  In the `tizen-manifest.xml` file:
  - To access the Internet, declare `http://tizen.org/privilege/internet`
